# vim:ft=automake
# Gearman server and library
# Copyright (C) 2008 Brian Aker, Eric Day
# All rights reserved.
#
# Use and distribution licensed under the BSD license.  See
# the COPYING file in the parent directory for full text.

noinst_LTLIBRARIES+= tests/libtest.la
tests_libtest_la_SOURCES= tests/test.c tests/test_gearmand.c


VALGRIND_COMMAND= $(LIBTOOL) --mode=execute valgrind --leak-check=yes --show-reachable=yes

TEST_LDADD= \
	    tests/libtest.la \
	    libgearman/libgearman.la \
	    libgearman-server/libgearman-server.la

if HAVE_LIBMEMCACHED
if HAVE_MEMCACHED
LIBMEMCACHED_PIDFILE = ${abs_top_builddir}/tests/Xumemc.pid
LIBMEMCACHED_TEST= tests/memcached_test
# Note, SETUP should do a test for existance and then kill if it exists.
LIBMEMCACHED_SETUP= $(MEMCACHED_BINARY) -d -P ${LIBMEMCACHED_PIDFILE} -p 12555
LIBMEMCACHED_TEARDOWN= \
		       cat ${LIBMEMCACHED_PIDFILE} | xargs kill; \
		       rm ${LIBMEMCACHED_PIDFILE}

noinst_PROGRAMS += tests/memcached_test
endif
endif

tests_memcached_test_SOURCES= tests/memcached_test.c
tests_memcached_test_LDADD= ${TEST_LDADD}

if HAVE_LIBSQLITE3
SQLITE_TEST= tests/sqlite_test
SQLITE_RM= rm -f tests/gearman.sql tests/gearman.sql-journal
CLEANFILES+= tests/gearman.sql tests/gearman.sql-journal
noinst_PROGRAMS += tests/sqlite_test
endif

tests_sqlite_test_SOURCES= tests/sqlite_test.c
tests_sqlite_test_LDADD= ${TEST_LDADD}

if HAVE_LIBTOKYOCABINET
TOKYOCABINET_TEST= tests/tokyocabinet_test
TOKYOCABINET_RM= rm -f tests/gearman.tcb
CLEANFILES+= tests/gearman.tcb
noinst_PROGRAMS += tests/tokyocabinet_test
endif

tests_tokyocabinet_test_SOURCES= tests/tokyocabinet_test.c
tests_tokyocabinet_test_LDADD= ${TEST_LDADD}

noinst_PROGRAMS+= \
		tests/client_test \
		tests/cpp_test \
		tests/internals_test \
		tests/regression_test \
		tests/worker_test

noinst_HEADERS+= \
	      tests/test.h \
	      tests/test_gearmand.h \
	      tests/test_worker.h

tests_client_test_SOURCES= tests/test_worker.c tests/client_test.c
tests_client_test_LDADD= ${TEST_LDADD}

tests_internals_test_SOURCES= tests/internals.c
tests_internals_test_LDADD= ${TEST_LDADD} libgearman/libgearmancore.la

tests_regression_test_SOURCES= tests/regression.c
tests_regression_test_LDADD= ${TEST_LDADD} libgearman/libgearmancore.la

tests_worker_test_SOURCES= tests/worker_test.c
tests_worker_test_LDADD= ${TEST_LDADD}

# Test linking with C++ application
tests_cpp_test_SOURCES= tests/cpp_test.cc
tests_cpp_test_LDADD= ${TEST_LDADD}

test-client:
	tests/client_test $(ARG1) $(ARG2)

test-worker:
	tests/worker_test $(ARG1) $(ARG2)

test-internals:
	tests/internals_test $(ARG1) $(ARG2)

test-libmemcached:
	$(LIBMEMCACHED_SETUP)
	$(LIBMEMCACHED_TEST) $(ARG1) $(ARG2)
	$(LIBMEMCACHED_TEARDOWN)

test-sqlite:
	$(SQLITE_TEST) $(ARG1) $(ARG2)
	$(SQLITE_RM)

test-tokyocabinet:
	$(TOKYOCABINET_TEST) $(ARG1) $(ARG2)
	$(TOKYOCABINET_RM)

check-local: test-client test-worker test-internals test-libmemcached test-sqlite test-tokyocabinet

gdb-client: ${noinst_PROGRAMS}
	$(LIBTOOL) --mode=execute gdb tests/client_test

gdb-worker: ${noinst_PROGRAMS}
	$(LIBTOOL) --mode=execute gdb tests/worker_test

gdb-internals: ${noinst_PROGRAMS}
	$(LIBTOOL) --mode=execute gdb tests/internals_test

valgrind-client:
	$(VALGRIND_COMMAND) tests/client_test $(ARG1) $(ARG2)

valgrind-worker:
	$(VALGRIND_COMMAND) tests/worker_test $(ARG1) $(ARG2)

valgrind-internals:
	$(VALGRIND_COMMAND) tests/internals_test $(ARG1) $(ARG2)

valgrind-libmemcached:
	$(LIBMEMCACHED_SETUP)
	$(VALGRIND_COMMAND) $(LIBMEMCACHED_TEST) $(ARG1) $(ARG2)
	$(LIBMEMCACHED_TEARDOWN)

valgrind-sqlite:
	$(VALGRIND_COMMAND) $(SQLITE_TEST) $(ARG1) $(ARG2)
	$(SQLITE_RM)

valgrind-tokyocabinet:
	$(VALGRIND_COMMAND) $(TOKYOCABINET_TEST) $(ARG1) $(ARG2)
	$(TOKYOCABINET_RM)

valgrind: ${noinst_PROGRAMS} valgrind-client valgrind-worker valgrind-internals valgrind-sqlite valgrind-tokyocabinetn
