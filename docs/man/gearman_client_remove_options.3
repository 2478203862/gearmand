.TH "GEARMAN_CLIENT_REMOVE_OPTIONS" "3" "May 24, 2011" "0.20" "Gearmand"
.SH NAME
gearman_client_remove_options \- Gearmand Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructeredText.
.
.SH LIBRARY
.sp
C Client Library for Gearmand (libgearman, \-lgearman)
.SH SYNOPSIS
.sp
#include <libgearman/gearman.h>
.INDENT 0.0
.TP
.B gearman_client_st
.UNINDENT
.INDENT 0.0
.TP
.B gearman_client_st *gearman_client_create(gearman_client_st *client);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_client_st *gearman_client_clone(gearman_client_st *client, const gearman_client_st *from);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_free(gearman_client_st *client);
.UNINDENT
.INDENT 0.0
.TP
.B const char *gearman_client_error(const gearman_client_st *client);
.UNINDENT
.INDENT 0.0
.TP
.B int gearman_client_errno(const gearman_client_st *client);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_client_options_t gearman_client_options(const gearman_client_st *client);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_add_options(gearman_client_st *client, gearman_client_options_t options);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_remove_options(gearman_client_st *client, gearman_client_options_t options);
.UNINDENT
.INDENT 0.0
.TP
.B int gearman_client_timeout(gearman_client_st *client);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_timeout(gearman_client_st *client, int timeout);
.UNINDENT
.INDENT 0.0
.TP
.B void *gearman_client_context(const gearman_client_st *client);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_context(gearman_client_st *client, void *context);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_log_fn(gearman_client_st *client, gearman_log_fn *function, void *context, gearman_verbose_t verbose);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_workload_malloc_fn(gearman_client_st *client, gearman_malloc_fn *function, void *context);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_workload_free_fn(gearman_client_st *client, gearman_free_fn *function, void *context);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_return_t gearman_client_add_server(gearman_client_st *client, const char *host, in_port_t port);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_return_t gearman_client_add_servers(gearman_client_st *client, const char *servers);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_remove_servers(gearman_client_st *client);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_return_t gearman_client_wait(gearman_client_st *client);
.UNINDENT
.INDENT 0.0
.TP
.B void *gearman_client_do(gearman_client_st *client, const char *function_name, const char *unique, const void *workload, size_t workload_size, size_t *result_size, gearman_return_t *ret_ptr);
.UNINDENT
.INDENT 0.0
.TP
.B void *gearman_client_do_high(gearman_client_st *client, const char *function_name, const char *unique, const void *workload, size_t workload_size, size_t *result_size, gearman_return_t *ret_ptr);
.UNINDENT
.INDENT 0.0
.TP
.B void *gearman_client_do_low(gearman_client_st *client, const char *function_name, const char *unique, const void *workload, size_t workload_size, size_t *result_size, gearman_return_t *ret_ptr);
.UNINDENT
.INDENT 0.0
.TP
.B const char *gearman_client_do_job_handle(const gearman_client_st *client);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_do_status(gearman_client_st *client, uint32_t *numerator, uint32_t *denominator);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_return_t gearman_client_do_background(gearman_client_st *client, const char *function_name, const char *unique, const void *workload, size_t workload_size, char *job_handle);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_return_t gearman_client_do_high_background(gearman_client_st *client, const char *function_name, const char *unique, const void *workload, size_t workload_size, char *job_handle);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_return_t gearman_client_do_low_background(gearman_client_st *client, const char *function_name, const char *unique, const void *workload, size_t workload_size, char *job_handle);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_return_t gearman_client_job_status(gearman_client_st *client, const char *job_handle, bool *is_known, bool *is_running, uint32_t *numerator, uint32_t *denominator);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_return_t gearman_client_echo(gearman_client_st *client, const void *workload, size_t workload_size);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_task_free_all(gearman_client_st *client);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_task_context_free_fn(gearman_client_st *client, gearman_task_context_free_fn *function);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_task_st *gearman_client_add_task(gearman_client_st *client, gearman_task_st *task, void *context, const char *function_name, const char *unique, const void *workload, size_t workload_size, gearman_return_t *ret_ptr);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_task_st *gearman_client_add_task_high(gearman_client_st *client, gearman_task_st *task, void *context, const char *function_name, const char *unique, const void *workload, size_t workload_size, gearman_return_t *ret_ptr);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_task_st *gearman_client_add_task_low(gearman_client_st *client, gearman_task_st *task, void *context, const char *function_name, const char *unique, const void *workload, size_t workload_size, gearman_return_t *ret_ptr);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_task_st *gearman_client_add_task_background(gearman_client_st *client, gearman_task_st *task, void *context, const char *function_name, const char *unique, const void *workload, size_t workload_size, gearman_return_t *ret_ptr);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_task_st * gearman_client_add_task_high_background(gearman_client_st *client, gearman_task_st *task, void *context, const char *function_name, const char *unique, const void *workload, size_t workload_size, gearman_return_t *ret_ptr);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_task_st * gearman_client_add_task_low_background(gearman_client_st *client, gearman_task_st *task, void *context, const char *function_name, const char *unique, const void *workload, size_t workload_size, gearman_return_t *ret_ptr);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_task_st *gearman_client_add_task_status(gearman_client_st *client, gearman_task_st *task, void *context, const char *job_handle, gearman_return_t *ret_ptr);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_workload_fn(gearman_client_st *client, gearman_workload_fn *function);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_created_fn(gearman_client_st *client, gearman_created_fn *function);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_data_fn(gearman_client_st *client, gearman_data_fn *function);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_warning_fn(gearman_client_st *client, gearman_warning_fn *function);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_status_fn(gearman_client_st *client, gearman_universal_status_fn *function);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_complete_fn(gearman_client_st *client, gearman_complete_fn *function);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_exception_fn(gearman_client_st *client, gearman_exception_fn *function);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_set_fail_fn(gearman_client_st *client, gearman_fail_fn *function);
.UNINDENT
.INDENT 0.0
.TP
.B void gearman_client_clear_fn(gearman_client_st *client);
.UNINDENT
.INDENT 0.0
.TP
.B gearman_return_t gearman_client_run_tasks(gearman_client_st *client);
.UNINDENT
.INDENT 0.0
.TP
.B bool gearman_client_compare(const gearman_client_st *first, const gearman_client_st *second);
.UNINDENT
.SH DESCRIPTION
.sp
gearman_client_st is used to create a client that can communicate with a
Gearman server.
.sp
This a complete list of all functions that work with a gearman_client_st.
.SH RETURN
.sp
Various
.SH HOME
.sp
To find out more information please check:
\fI\%https://launchpad.net/gearmand\fP
.SH SEE ALSO
.sp
\fIgearmand(8)\fP \fIlibgearman(3)\fP
.SH AUTHOR
Data Differential http://datadifferential.com/
.SH COPYRIGHT
2011, Data Differential, http://datadifferential.com/
.\" Generated by docutils manpage writer.
.\" 
.
